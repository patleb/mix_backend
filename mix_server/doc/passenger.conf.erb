# https://github.com/phusion/passenger
# bf08ffa9f687df7a8bb0f2d1358f33fa66588085
##########################################################################
#  Passenger Standalone is built on the same technology that powers
#  Passenger for Nginx, so any configuration option supported by Passenger
#  for Nginx can be applied to Passenger Standalone as well. You can do
#  this by direct editing the Nginx configuration template that is used by
#  Passenger Standalone.
#
#  This file is the original template. DO NOT EDIT THIS FILE DIRECTLY.
#  Instead, make a copy of this file and pass the `--nginx-config-template`
#  parameter to Passenger Standalone.
#
#  Learn more about using the Nginx configuration template at:
#  https://www.phusionpassenger.com/library/config/standalone/intro.html#nginx-configuration-template
#
#  *** NOTE ***
#  If you customize the template file, make sure you keep an eye on the
#  original template file and merge any changes. New Phusion Passenger
#  features may require changes to the template file.
##############################################################

master_process on;
daemon on;

error_log '<%= @options[:log_file] %>' <% if @options[:log_level] >= LVL_DEBUG %>info<% end %>;
pid '<%= @options[:pid_file] %>';

<% if @options[:abort_websockets_on_process_shutdown].nil? || @options[:abort_websockets_on_process_shutdown] %>
  worker_shutdown_timeout 10;
<% end %>

<% if Process.euid == 0 %>
  <% if @options[:user] %>
    <%# Run workers as the given user. The master process will always run as root and will be able to bind to any port. %>
    user <%= @options[:user] %> <%= default_group_for(@options[:user]) %>;
  <% else %>
    <%# Prevent running Nginx workers as nobody. %>
    user <%= current_user %> <%= default_group_for(current_user) %>;
  <% end %>
<% end %>

worker_processes 1;
events {
  worker_connections 4096;
}

http {
  log_format debug '[$time_local] $msec  "$request" $status conn=$connection sent=$bytes_sent body_sent=$body_bytes_sent';
  include '<%= PhusionPassenger.resources_dir %>/mime.types';

  passenger_root '<%= PhusionPassenger.install_spec %>';
  passenger_abort_on_startup_error on;
  passenger_ctl pidfiles_to_delete_on_exit '["<%= "#{@working_dir}/temp_dir_toucher.pid" %>"]';
  passenger_ctl integration_mode standalone;
  passenger_ctl standalone_engine nginx;
  passenger_user_switching off;

  <% if Process.euid == 0 %>
    <% if @options[:ruby] %>
      passenger_ruby <%= @options[:ruby] %>;
    <% else %>
      passenger_ruby <%= PlatformInfo.ruby_command %>;
    <% end %>
    <% if @options[:user] %>
      passenger_user <%= @options[:user] %>;
      passenger_default_user <%= @options[:user] %>;
    <% else %>
      passenger_user <%= current_user %>;
      passenger_default_user <%= current_user %>;
    <% end %>
  <% end %>

  <%= nginx_http_option(:socket_backlog) %>
  <%= nginx_http_option(:python) %>
  <%= nginx_http_option(:nodejs) %>
  <%= nginx_http_option(:log_level) %>
  <%= nginx_http_option(:disable_log_prefix) %>
  <%= nginx_http_option(:max_pool_size) %>
  <%= nginx_http_option(:pool_idle_time) %>
  <%= nginx_http_option(:max_preloader_idle_time) %>
  <%= nginx_http_option(:turbocaching) %>
  <%= nginx_http_option(:instance_registry_dir) %>
  <%= nginx_http_option(:spawn_dir) %>
  <%= nginx_http_option(:disable_security_update_check) %>
  <%= nginx_http_option(:security_update_check_proxy) %>
  <%= nginx_http_option(:disable_anonymous_telemetry) %>
  <%= nginx_http_option(:anonymous_telemetry_proxy) %>
  <%= nginx_http_option(:data_buffer_dir) %>
  <%= nginx_http_option(:core_file_descriptor_ulimit) %>
  <%= nginx_http_option(:admin_panel_url) %>
  <%= nginx_http_option(:admin_panel_auth_type) %>
  <%= nginx_http_option(:admin_panel_username) %>
  <%= nginx_http_option(:admin_panel_password) %>
  <% @options[:ctls].each do |ctl| %>
    passenger_ctl '<%= ctl.split("=", 2)[0] %>' '<%= ctl.split("=", 2)[1] %>';
  <% end %>

  ### BEGIN your own configuration options ###
  # This is a good place to put your own config
  # options. Note that your options must not
  # conflict with the ones Passenger already sets.
  # Learn more at:
  # https://www.phusionpassenger.com/library/config/standalone/intro.html#nginx-configuration-template

  ### END your own configuration options ###

  default_type application/octet-stream;
  types_hash_max_size 2048;
  server_names_hash_bucket_size 64;
  client_max_body_size 1024m;
  access_log off;
  keepalive_timeout 60;
  underscores_in_headers on;
  gzip on;
  gzip_comp_level 3;
  gzip_min_length 150;
  gzip_proxied any;
  gzip_types text/plain text/css text/json text/javascript
    application/javascript application/x-javascript application/json
    application/rss+xml application/vnd.ms-fontobject application/x-font-ttf
    application/xml font/opentype image/svg+xml text/xml;

  <% if @app_finder.multi_mode? %>
    # Default server entry for mass deployment mode.
    server {
      <% if @options[:ssl] %>
        <% if @options[:ssl_port] %>
          listen <%= nginx_listen_address %>;
          listen <%= nginx_listen_address_with_ssl_port %> ssl http2;
        <% else %>
          listen <%= nginx_listen_address %> ssl http2;
        <% end %>
      <% else %>
        listen <%= nginx_listen_address %>;
      <% end %>
      root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
    }
  <% end %>

  <% for app in @apps %>
    server {
      server_name <%= app[:server_names].join(' ') %>;
      <% if app[:ssl] %>
        <% if app[:ssl_port] %>
          listen <%= nginx_listen_address(app) %>;
          listen <%= nginx_listen_address_with_ssl_port(app) %> ssl http2;
        <% else %>
          listen <%= nginx_listen_address(app) %> ssl http2;
        <% end %>
        ssl_certificate <%= app[:ssl_certificate] %>;
        ssl_certificate_key <%= app[:ssl_certificate_key] %>;
      <% else %>
        listen <%= nginx_listen_address(app) %>;
      <% end %>
      <% if app[:static_files_dir] %>
        root '<%= app[:static_files_dir] %>';
      <% else %>
        root '<%= app[:root] %>/public';
      <% end %>

      passenger_app_root '<%= app[:root] %>';
      passenger_enabled on;

      <% if app[:union_station_key] %>
        union_station_support on;
        union_station_key <%= app[:union_station_key] %>;
      <% end %>
      <% app[:envvars].each_pair do |name, value| %>
        passenger_env_var '<%= name %>' '<%= json_config_value(value) %>';
      <% end %>
      <% if app[:concurrency_model] && app[:concurrency_model] != DEFAULT_CONCURRENCY_MODEL %>
        passenger_concurrency_model <%= app[:concurrency_model] %>;
      <% end %>
      <% if app[:thread_count] && app[:thread_count] != DEFAULT_APP_THREAD_COUNT %>
        passenger_thread_count <%= app[:thread_count] %>;
      <% end %>

      <%= nginx_option(app, :environment, :passenger_app_env) %>
      <%= nginx_option(app, :ruby) %>
      <%= nginx_option(app, :python) %>
      <%= nginx_option(app, :nodejs) %>
      <%= nginx_option(app, :spawn_method) %>
      <%= nginx_option(app, :app_type) %>
      <%= nginx_option(app, :startup_file) %>
      <%= nginx_option(app, :app_start_command) %>
      <%= nginx_option(app, :start_timeout) %>
      <%= nginx_option(app, :min_instances) %>
      <%= nginx_option(app, :max_request_queue_size) %>
      <%= nginx_option(app, :restart_dir) %>
      <%= nginx_option(app, :sticky_sessions) %>
      <%= nginx_option(app, :sticky_sessions_cookie_name) %>
      <%= nginx_option(app, :sticky_sessions_cookie_attributes) %>
      <%= nginx_option(app, :vary_turbocache_by_cookie) %>
      <%= nginx_option(app, :meteor_app_settings) %>
      <%= nginx_option(app, :load_shell_envvars) %>
      <%= nginx_option(app, :preload_bundler) %>
      <%= nginx_option(app, :app_file_descriptor_ulimit) %>
      <%= nginx_option(app, :friendly_error_pages) %>
      <%= nginx_option(app, :custom_error_page) %>
      <%= nginx_option(app, :abort_websockets_on_process_shutdown) %>
      <%= nginx_option(app, :force_max_concurrent_requests_per_process) %>
      <%= nginx_option(app, :max_requests) %>

      <%= nginx_option(app, :rolling_restarts) %>
      <%= nginx_option(app, :resist_deployment_errors) %>
      <%= nginx_option(app, :memory_limit) %>
      <%= nginx_option(app, :max_request_time) %>
      <%= nginx_option(app, :debugger) %>

      <% app[:unlimited_concurrency_paths].each do |path| %>
        location ~ ^<%= path %>(/.*|$) {
        passenger_app_group_name '<%= app[:root] %>#unlimited_concurrency';
        passenger_force_max_concurrent_requests_per_process 0;
        }
      <% end %>

      # Rails asset pipeline & webpacker support.
      location ~ "^/(assets|packs)/.+-([0-9a-f]{32}|[0-9a-f]{64}|[0-9a-f]{20}|[0-9a-f]{8})\..+" {
        error_page 490 = @static_asset;
        error_page 491 = @dynamic_request;
        recursive_error_pages on;

        if (-f $request_filename) {
          return 490;
        }
        if (!-f $request_filename) {
          return 491;
        }
      }
      location @static_asset {
        gzip_static on;
        expires max;
        add_header Cache-Control public;
        add_header ETag "";
      }
      location @dynamic_request {
        passenger_enabled on;
      }

      ### BEGIN your own configuration options ###
      # This is a good place to put your own config
      # options. Note that your options must not
      # conflict with the ones Passenger already sets.
      # Learn more at:
      # https://www.phusionpassenger.com/library/config/standalone/intro.html#nginx-configuration-template

      ### END your own configuration options ###
    }
    passenger_pre_start <%= listen_url(app) %>;
  <% end %>

  # Reserved for future use
}
