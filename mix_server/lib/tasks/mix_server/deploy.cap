namespace :deploy do
  namespace :logrotate do
    desc 'upload app logrotate'
    task :push do
      on release_roles fetch(:bundle_roles) do
        logrotate_path = "/etc/logrotate.d/#{fetch(:deploy_dir)}"
        template_push 'logrotate', logrotate_path
        execute :sudo, :chown, 'root:root', logrotate_path
        execute :sudo, :chmod, 644, logrotate_path
      end
    end
  end

  desc 'link dev shared folder'
  task :link_dev do
    next unless cap.env.vagrant?
    on release_roles(:all) do
      execute :rm, '-f', current_path
      execute :ln, "-s", '/vagrant', current_path
    end
    set :bundle_path, nil
    set :bundle_binstubs, nil
    set :bundle_jobs, nil
    set :bundle_without, nil
    set :bundle_flags, nil
    ENV['DEVELOPMENT'] = 'true'
    invoke 'bundler:install'
    invoke 'nginx:app:push'
  end

  desc 'unlink dev shared folder'
  task :unlink_dev do
    next unless cap.env.vagrant?
    on release_roles(:all) do
      execute :rm, '-f', current_path
      execute :ln, '-s', "$(ls -dt #{releases_path}/* | head -1)", current_path
    end
    invoke 'nginx:app:push'
  end

  desc 'Full server deploy after provisioning'
  task push: %i(
    osquery:push
    osquery:restart
    nginx:push
    pgrest:push
    deploy:app:push
    dns:set_hosts
  )

  namespace :app do
    desc 'App server deploy after provisioning'
    task push: %i(
      deploy:check:directories
      deploy:check:linked_dirs
      deploy:check:make_linked_dirs
      deploy:logrotate:push
      secrets:push
      nginx:app:push
      nginx:app:enable
      nginx:maintenance:push
      db:pg:create_user
      db:pg:create_database
      db:pg:set_superuser
      whenever:create_cron_log
    ) do
      old_assets_role = fetch(:assets_roles)
      old_job_role = fetch(:job_roles)
      set :assets_roles, false
      set :job_roles, false
      invoke 'deploy'
      set :job_roles, old_job_role
      invoke 'job:push'
      invoke! 'job:restart'
      set :assets_roles, old_assets_role
      invoke! 'deploy:assets:precompile'
      invoke! 'deploy:assets:backup_manifest'
    ensure
      set :assets_roles, old_assets_role
      set :job_roles, old_job_role
    end
  end
end
