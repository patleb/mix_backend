##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##
# TODO https://www.ecalamia.com/blog/show-ip-api-nginx/

# Default server configuration
#
<% deferred = fetch(:nginx_deferred) ? 'deferred' : '' %>

<% fetch(:nginx_upstreams).each do |upstream, content| %>
  upstream '<%= upstream %>' {
    <%= content %>
  }
<% end %>
# TODO https://mattbrictson.com/accelerated-rails-downloads
# https://www.djaodjin.com/blog/nginx-authenticated-files-access.blog.html
server {
  listen 80 <%= deferred %>;
  listen [::]:80 <%= deferred %>;

  server_name '<%= fetch(:server) %>';

  location ~ \.php$ {
    return 404;
  }

  <% if fetch(:nginx_rails) %>
    root <%= fetch(:deploy_to) %>/current/public;

    passenger_enabled on;
    passenger_app_env <%= cap.env %>;
    passenger_env_var RAILS_APP <%= cap.app %>;
    passenger_env_var RAKE_OUTPUT true;
    <% if ENV['DEVELOPMENT'].to_b %>
      passenger_env_var DEVELOPMENT true;
    <% end %>
    <% if ENV['STICKY_SESSIONS'].to_b %>
      passenger_sticky_sessions on;
    <% end %>
    # TODO
    # try_files $uri @passenger;
    #
    # location @passenger {
    #   passenger_enabled on;
    #   passenger_app_env <%= cap.env %>;
    #   limit_req zone=per_ip burst=8 nodelay;
    #   limit_req zone=per_server burst=20 nodelay;
    # }

    error_page 503 @503;

    location @503 {
      if (-f $request_filename) {
        break;
      }

      rewrite ^(.*)$ /503.html break;
    }
  <% end %>

  <% if ENV['MAINTENANCE'].to_b %>
    return 503;
  <% end %>

  ##
  # Logging Settings
  ##

  access_log /var/log/nginx/<%= fetch(:deploy_dir) %>.access.log mix_server_access_log;

  # SSL configuration
  #
  <% unless fetch(:nginx_skip_ssl) %>
    listen 443 ssl http2 <%= deferred %>;
    listen [::]:443 ssl http2 <%= deferred %>;
  <% end %>
  #
  # Self signed certs generated by the ssl-cert package
  # Don't use them in a production server!
  #
  # include snippets/snakeoil.conf;

  <% fetch(:nginx_locations).each do |location, content| %>
    location '<%= location %>' {
      <%= content %>

      access_log /var/log/nginx/<%= fetch(:deploy_dir) %>_<%= location.full_underscore %>.access.log mix_server_access_log;
    }
  <% end %>

  <% if fetch(:nginx_rails) %>
    location /packs/ {
      gzip_static on;
      if_modified_since off;
      add_header Last-Modified "";
      etag off;
      expires 1M;
      add_header Cache-Control public;
      access_log /var/log/nginx/<%= fetch(:deploy_dir) %>_packs.access.log mix_server_access_log;
    }

    <% fetch(:nginx_public_dirs).each do |root| %>
      location /<%= root %>/ {
        expires 1M;
        add_header Cache-Control public;
        access_log /var/log/nginx/<%= fetch(:deploy_dir) %>_public.access.log mix_server_access_log;
      }
    <% end %>

    <% fetch(:nginx_public_files).each do |root| %>
      location /<%= root %> {
        expires 1M;
        add_header Cache-Control public;
        access_log /var/log/nginx/<%= fetch(:deploy_dir) %>_public.access.log mix_server_access_log;
      }
    <% end %>
  <% end %>
}

<% if fetch(:nginx_redirects).any? %>
  server {
    listen 80;
    listen [::]:80;
    <% unless fetch(:nginx_skip_ssl) %>
      listen 443 ssl;
      listen [::]:443 ssl;
    <% end %>

    server_name '<%= fetch(:server) %>';

    <% fetch(:nginx_redirects).each do |src, dst| %>
      location = /<%= src.sub(/^\//, '') %> {
        return 301 $scheme://$server_name/<%= dst.sub(/^\//, '') %>;
      }
    <% end %>
  }
<% end %>

# server {
#   listen 80;
#   listen [::]:80;
#
#   server_name '<%= fetch(:server) %>';
#
#   return 301 https://$host$request_uri;
# }

<% if fetch(:nginx_rails) %>
  passenger_pre_start http<%= 's' unless fetch(:nginx_skip_ssl) %>://<%= fetch(:server) %>/;
<% end %>
