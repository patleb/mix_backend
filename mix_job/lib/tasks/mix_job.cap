# TODO
# https://stackoverflow.com/questions/40717036/systemd-custom-commands-to-a-service
# http://0pointer.de/blog/projects/systemd-for-admins-4.html
namespace :load do
  task :defaults do
    set :job_queue_name, -> { 'default' }
    set :job_service, -> { "#{fetch(:deploy_dir)}-job-#{fetch(:job_queue_name)}" }

    append :gems, 'mix_job'
    append :linked_dirs, 'tmp/jobs'
  end
end

namespace :job do
  %w(start stop restart).each do |action|
    desc "#{action.capitalize} job service"
    task action do
      on release_roles fetch(:job_roles) do
        execute :sudo, :systemctl, action, fetch(:job_service)
      end
    end
  end
  after 'deploy:restart', 'job:restart'

  desc 'Export job systemd service file'
  task :push do
    on release_roles fetch(:job_roles) do
      service_file = "/etc/systemd/system/#{fetch(:job_service)}.service"
      template_push 'systemd/job.service', service_file
      execute :sudo, :chown, 'root:root', service_file
      execute :sudo, :chmod, '0644', service_file
      execute :sudo, :systemctl, 'enable', fetch(:job_service)
      execute :sudo, :systemctl, 'daemon-reload'
      execute :mkdir, '-p', shared_path.join('tmp/jobs/actions')
    end
  end
  after 'job:push', 'job:restart'

  desc 'Remove job systemd service file'
  task :remove do
    invoke 'job:stop'
    on release_roles fetch(:job_roles) do
      execute :sudo, :systemctl, 'disable', fetch(:job_service)
      execute :sudo, :rm, '-f', "/etc/systemd/system/#{fetch(:job_service)}.service"
      execute :sudo, :systemctl, 'daemon-reload'
    end
  end

  namespace :wait do
    desc 'Set watcher on hold for next start'
    task :enable do
      on release_roles fetch(:job_roles) do
        execute :touch, shared_path.join('tmp/jobs/wait.txt')
      end
    end

    desc 'Set watcher as ready for next start'
    task :disable do
      on release_roles fetch(:job_roles) do
        execute :rm, '-f', shared_path.join('tmp/jobs/wait.txt')
      end
    end
  end
end
