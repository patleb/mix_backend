namespace :nginx do
  %w(start stop restart reload).each do |action|
    desc "#{action.capitalize} nginx service"
    task action do
      on release_roles :all do
        send "nginx_#{action}"
      end
    end
    before "nginx:#{action}", 'nginx:configtest' unless action == 'stop'
  end

  desc "Kill nginx"
  task :kill do
    on release_roles :all do
      execute Sh.kill('nginx', '-o')
    end
  end

  desc 'Recover nginx from lost pid'
  task :recover do
    invoke 'nginx:stop'
    invoke 'nginx:kill'
    invoke 'nginx:start'
  end

  desc "Configtest nginx service"
  task :configtest do
    on release_roles :all do
      if test("[ $(sudo nginx -t | grep -c 'failed') -eq 0 ]")
        info 'config [OK]'
      else
        abort("nginx configuration is invalid! (Make sure nginx configuration files are readable and correctly formated.)")
      end
    end
  end

  desc 'Export nginx global configuration file'
  task :push do
    on release_roles :all do
      template_push 'nginx/system.nginx', '/etc/nginx/nginx.conf'
    end
  end
  after 'nginx:push', 'nginx:reload'

  desc 'apply correct ownership to nginx directory on Centos'
  task :apply_owner do
    on release_roles :all do
      if cap.os.centos?
        execute "sudo chown -R #{fetch(:deployer_name)}:#{fetch(:deployer_name)} /var/lib/nginx"
      end
    end
  end
  before 'nginx:push', 'nginx:apply_owner'

  namespace :app do
    desc 'Enable application (with optional site name)'
    task :enable, [:site] do |t, args|
      on release_roles :all do
        site = args.has_key?(:site) ? args[:site] : fetch(:deploy_dir)
        if test("! [ -h /etc/nginx/sites-enabled/#{site} ]")
          within '/etc/nginx/sites-enabled' do
            site_available = "/etc/nginx/sites-available/#{site}"
            site_enabled = "/etc/nginx/sites-enabled/#{site}"
            execute :sudo, :ln, '-nfs', site_available, site_enabled
          end
          nginx_reload
        end
      end
    end

    desc 'Disable application (with optional site name)'
    task :disable, [:site] do |t, args|
      on release_roles :all do
        site = args.has_key?(:site) ? args[:site] : fetch(:deploy_dir)
        if test("[ -f /etc/nginx/sites-enabled/#{site} ]")
          within '/etc/nginx/sites-enabled' do
            site_enabled = "/etc/nginx/sites-enabled/#{site}"
            execute :sudo, :rm, '-f', site_enabled
          end
          nginx_reload
        end
      end
    end

    desc 'Export nginx app configuration file'
    task :push do
      on release_roles :all do
        template_push 'nginx/app.nginx', "/etc/nginx/sites-available/#{fetch(:deploy_dir)}"
      end
    end
    after 'nginx:app:push', 'nginx:reload'

    desc 'Remove nginx app configuration file'
    task :remove do
      on release_roles :all do
        nginx_app_push
      end
    end

    namespace :maintenance do
      desc "Push 503.html template"
      task :push do
        on release_roles :all do
          template_push '503.html', shared_path.join('public', '503.html')
        end
      end

      desc "Enable maintenance mode"
      task :enable do
        invoke 'nginx:app:maintenance:push'
        ENV['MAINTENANCE'] = 'true'
        invoke 'nginx:app:push'
      end

      desc "Disable maintenance mode"
      task :disable do
        invoke 'nginx:app:push'
      end
    end

    namespace :auth_basic do
      task :add, [:name, :pwd] do |t, args|
        on release_roles :all do
          raise "user password cannot be empty" unless (pwd = args[:pwd]).present?
          pwd = `openssl passwd -apr1 "#{pwd}"`.strip
          execute_bash Sh.concat('/etc/nginx/.htpasswd', "#{args[:name]}:#{pwd}", unique: true), sudo: true, u: false
        end
      end

      task :remove, [:name] do |t, args|
        on release_roles :all do
          raise "user name cannot be empty" unless (name = args[:name]).present?
          execute :sudo, Sh.delete_lines!('/etc/nginx/.htpasswd', name)
        end
      end
    end
  end
end
