# TODO 'at' command
CAP_RAKE_DESC_MSG = "Execute a rake task on a remote server"
CAP_RAKE_ERROR_MSG = "Failed! You need to specify the 'TASK' parameter!", "Usage: cap <stage> rake TASK=your:task"

desc CAP_RAKE_DESC_MSG
task :rake do
  next error CAP_RAKE_ERROR_MSG unless ENV['TASK'].present?
  on release_roles :all do
    execute_rake ENV['TASK']
  end
end

desc "#{CAP_RAKE_DESC_MSG} with RAKE_OUTPUT=false"
task :rake! do
  next error CAP_RAKE_ERROR_MSG.sub('rake', 'rake!') unless ENV['TASK'].present?
  on release_roles :all do
    execute_rake ENV['TASK'], output: false
  end
end

namespace :sudo do
  desc "#{CAP_RAKE_DESC_MSG} in sudo mode"
  task :rake do
    next error CAP_RAKE_ERROR_MSG.sub('rake', 'sudo:rake') unless ENV['TASK'].present?
    on release_roles :all do
      execute_rake ENV['TASK'], sudo: true
    end
  end

  desc "#{CAP_RAKE_DESC_MSG} in sudo mode with RAKE_OUTPUT=false"
  task :rake! do
    next error CAP_RAKE_ERROR_MSG.sub('rake', 'sudo:rake!') unless ENV['TASK'].present?
    on release_roles :all do
      execute_rake ENV['TASK'], sudo: true, output: false
    end
  end
end

namespace :nohup do
  desc "#{CAP_RAKE_DESC_MSG} in background mode"
  task :rake do
    next error CAP_RAKE_ERROR_MSG.sub('rake', 'nohup:rake') unless ENV['TASK'].present?
    on release_roles :all do
      execute_rake ENV['TASK'], nohup: true
    end
  end

  desc "#{CAP_RAKE_DESC_MSG} in background mode with RAKE_OUTPUT=false"
  task :rake! do
    next error CAP_RAKE_ERROR_MSG.sub('rake', 'nohup:rake!') unless ENV['TASK'].present?
    on release_roles :all do
      execute_rake ENV['TASK'], nohup: true, output: false
    end
  end

  namespace :sudo do
    desc "#{CAP_RAKE_DESC_MSG} in background and sudo mode"
    task :rake do
      next error CAP_RAKE_ERROR_MSG.sub('rake', 'nohup:sudo:rake') unless ENV['TASK'].present?
      on release_roles :all do
        execute_rake ENV['TASK'], nohup: true, sudo: true
      end
    end

    desc "#{CAP_RAKE_DESC_MSG} in background and sudo mode with RAKE_OUTPUT=false"
    task :rake! do
      next error CAP_RAKE_ERROR_MSG.sub('rake', 'nohup:sudo:rake!') unless ENV['TASK'].present?
      on release_roles :all do
        execute_rake ENV['TASK'], nohup: true, sudo: true, output: false
      end
    end
  end

  namespace :rake do
    desc "Kill background rake task process"
    task :kill do
      next error CAP_RAKE_ERROR_MSG.sub('rake', 'nohup:rake:kill') unless ENV['TASK'].present?
      on release_roles :all do
        kill_nohup "bin/rake #{ENV['TASK']}"
      end
    end
  end
end
