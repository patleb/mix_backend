module ActiveRecord::Migration::WithPartition
  PARTITION = / PARTITION .+$/i
  TABLE = / TABLE (\w+) /i

  def create_partitioned_table(name, key: :id, primary: true)
    create_table_sql do
      if key.match? /_at$/
        "CREATE TABLE #{name} (#{key} TIMESTAMP(6) NOT NULL) PARTITION BY RANGE (#{key})"
      elsif primary
        "CREATE TABLE #{name} (#{key} BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY) PARTITION BY RANGE (#{key})"
      else
        "CREATE TABLE #{name} (#{key} BIGINT NOT NULL) PARTITION BY RANGE (#{key})"
      end
    end
    if block_given?
      change_table name do |t|
        yield t
      end
    end
  end

  def create_table_sql
    sql = yield.strip_sql
    partitioned = sql.match? PARTITION
    reversible do |change|
      change.up do
        exec_query sql
      end
      change.down do
        table = sql.match(TABLE).captures[0]
        drop_table table, if_exists: true, force: (:cascade if partitioned)
      end
    end
  end
end
